/**
 * Console API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Log model module.
 * @module model/Log
 * @version 1.0
 */
class Log {
    /**
     * Constructs a new <code>Log</code>.
     * Deployable log collector instances of OpenXDR (i.e. Linux System Logs)
     * @alias module:model/Log
     * @param name {String} 
     * @param os {module:model/Log.OsEnum} 
     * @param source {String} 
     * @param status {module:model/Log.StatusEnum} 
     */
    constructor(name, os, source, status) { 
        
        Log.initialize(this, name, os, source, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, os, source, status) { 
        obj['name'] = name;
        obj['os'] = os;
        obj['source'] = source;
        obj['status'] = status || 'pending';
    }

    /**
     * Constructs a <code>Log</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Log} obj Optional instance to populate.
     * @return {module:model/Log} The populated <code>Log</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Log();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Log.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Log.prototype['name'] = undefined;

/**
 * @member {module:model/Log.OsEnum} os
 */
Log.prototype['os'] = undefined;

/**
 * @member {String} source
 */
Log.prototype['source'] = undefined;

/**
 * @member {module:model/Log.StatusEnum} status
 * @default 'pending'
 */
Log.prototype['status'] = 'pending';

/**
 * @member {Date} createdDate
 */
Log.prototype['createdDate'] = undefined;





/**
 * Allowed values for the <code>os</code> property.
 * @enum {String}
 * @readonly
 */
Log['OsEnum'] = {

    /**
     * value: "linux"
     * @const
     */
    "linux": "linux",

    /**
     * value: "macos"
     * @const
     */
    "macos": "macos",

    /**
     * value: "win"
     * @const
     */
    "win": "win"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Log['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default Log;

